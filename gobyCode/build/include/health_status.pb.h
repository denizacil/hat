// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: health_status.proto

#ifndef PROTOBUF_INCLUDED_health_5fstatus_2eproto
#define PROTOBUF_INCLUDED_health_5fstatus_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "dccl/option_extensions.pb.h"
#include <boost/units/quantity.hpp>
#include <boost/units/absolute.hpp>
#include <boost/units/dimensionless_type.hpp>
#include <boost/units/make_scaled_unit.hpp>

#include <boost/units/systems/si.hpp>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_health_5fstatus_2eproto 

namespace protobuf_health_5fstatus_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_health_5fstatus_2eproto
namespace hat {
namespace protobuf {
class HealthStatus;
class HealthStatusDefaultTypeInternal;
extern HealthStatusDefaultTypeInternal _HealthStatus_default_instance_;
}  // namespace protobuf
}  // namespace hat
namespace google {
namespace protobuf {
template<> ::hat::protobuf::HealthStatus* Arena::CreateMaybeMessage<::hat::protobuf::HealthStatus>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace hat {
namespace protobuf {

enum HealthStatus_HealthState {
  HealthStatus_HealthState_GOOD = 1,
  HealthStatus_HealthState_DEGRADED = 2,
  HealthStatus_HealthState_FAILING = 3,
  HealthStatus_HealthState_FAILED = 4
};
bool HealthStatus_HealthState_IsValid(int value);
const HealthStatus_HealthState HealthStatus_HealthState_HealthState_MIN = HealthStatus_HealthState_GOOD;
const HealthStatus_HealthState HealthStatus_HealthState_HealthState_MAX = HealthStatus_HealthState_FAILED;
const int HealthStatus_HealthState_HealthState_ARRAYSIZE = HealthStatus_HealthState_HealthState_MAX + 1;

const ::google::protobuf::EnumDescriptor* HealthStatus_HealthState_descriptor();
inline const ::std::string& HealthStatus_HealthState_Name(HealthStatus_HealthState value) {
  return ::google::protobuf::internal::NameOfEnum(
    HealthStatus_HealthState_descriptor(), value);
}
inline bool HealthStatus_HealthState_Parse(
    const ::std::string& name, HealthStatus_HealthState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<HealthStatus_HealthState>(
    HealthStatus_HealthState_descriptor(), name, value);
}
// ===================================================================

class HealthStatus : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hat.protobuf.HealthStatus) */ {
 public:
  HealthStatus();
  virtual ~HealthStatus();

  HealthStatus(const HealthStatus& from);

  inline HealthStatus& operator=(const HealthStatus& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HealthStatus(HealthStatus&& from) noexcept
    : HealthStatus() {
    *this = ::std::move(from);
  }

  inline HealthStatus& operator=(HealthStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HealthStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HealthStatus* internal_default_instance() {
    return reinterpret_cast<const HealthStatus*>(
               &_HealthStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(HealthStatus* other);
  friend void swap(HealthStatus& a, HealthStatus& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HealthStatus* New() const final {
    return CreateMaybeMessage<HealthStatus>(NULL);
  }

  HealthStatus* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<HealthStatus>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const HealthStatus& from);
  void MergeFrom(const HealthStatus& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HealthStatus* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef HealthStatus_HealthState HealthState;
  static const HealthState GOOD =
    HealthStatus_HealthState_GOOD;
  static const HealthState DEGRADED =
    HealthStatus_HealthState_DEGRADED;
  static const HealthState FAILING =
    HealthStatus_HealthState_FAILING;
  static const HealthState FAILED =
    HealthStatus_HealthState_FAILED;
  static inline bool HealthState_IsValid(int value) {
    return HealthStatus_HealthState_IsValid(value);
  }
  static const HealthState HealthState_MIN =
    HealthStatus_HealthState_HealthState_MIN;
  static const HealthState HealthState_MAX =
    HealthStatus_HealthState_HealthState_MAX;
  static const int HealthState_ARRAYSIZE =
    HealthStatus_HealthState_HealthState_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  HealthState_descriptor() {
    return HealthStatus_HealthState_descriptor();
  }
  static inline const ::std::string& HealthState_Name(HealthState value) {
    return HealthStatus_HealthState_Name(value);
  }
  static inline bool HealthState_Parse(const ::std::string& name,
      HealthState* value) {
    return HealthStatus_HealthState_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .hat.protobuf.HealthStatus.HealthState state = 1;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 1;
  ::hat::protobuf::HealthStatus_HealthState state() const;
  void set_state(::hat::protobuf::HealthStatus_HealthState value);

  enum DCCLParameters { DCCL_ID = 125,  DCCL_MAX_BYTES = 32 };
  // @@protoc_insertion_point(class_scope:hat.protobuf.HealthStatus)
 private:
  void set_has_state();
  void clear_has_state();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  int state_;
  friend struct ::protobuf_health_5fstatus_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// HealthStatus

// required .hat.protobuf.HealthStatus.HealthState state = 1;
inline bool HealthStatus::has_state() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HealthStatus::set_has_state() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HealthStatus::clear_has_state() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HealthStatus::clear_state() {
  state_ = 1;
  clear_has_state();
}
inline ::hat::protobuf::HealthStatus_HealthState HealthStatus::state() const {
  // @@protoc_insertion_point(field_get:hat.protobuf.HealthStatus.state)
  return static_cast< ::hat::protobuf::HealthStatus_HealthState >(state_);
}
inline void HealthStatus::set_state(::hat::protobuf::HealthStatus_HealthState value) {
  assert(::hat::protobuf::HealthStatus_HealthState_IsValid(value));
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:hat.protobuf.HealthStatus.state)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace hat

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::hat::protobuf::HealthStatus_HealthState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::hat::protobuf::HealthStatus_HealthState>() {
  return ::hat::protobuf::HealthStatus_HealthState_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_health_5fstatus_2eproto
