// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: distress_signal.proto

#include "distress_signal.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace hat {
namespace protobuf {
class DistressSignalDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DistressSignal>
      _instance;
} _DistressSignal_default_instance_;
}  // namespace protobuf
}  // namespace hat
namespace protobuf_distress_5fsignal_2eproto {
static void InitDefaultsDistressSignal() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hat::protobuf::_DistressSignal_default_instance_;
    new (ptr) ::hat::protobuf::DistressSignal();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hat::protobuf::DistressSignal::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DistressSignal =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDistressSignal}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_DistressSignal.base);
}

::google::protobuf::Metadata file_level_metadata[1];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hat::protobuf::DistressSignal, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hat::protobuf::DistressSignal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hat::protobuf::DistressSignal, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hat::protobuf::DistressSignal, tag_id_),
  1,
  0,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::hat::protobuf::DistressSignal)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::hat::protobuf::_DistressSignal_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "distress_signal.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\025distress_signal.proto\022\014hat.protobuf\032\034d"
      "ccl/option_extensions.proto\"\246\001\n\016Distress"
      "Signal\0228\n\005state\030\001 \002(\0162).hat.protobuf.Dis"
      "tressSignal.SwimmerState\022%\n\006tag_id\030\002 \002(\r"
      "B\025\242\?\022)\000\000\000\000\000\000\360\?1\000\000\000\000\000\000Y@\"(\n\014SwimmerState\022"
      "\010\n\004SAFE\020\001\022\016\n\nDISTRESSED\020\002:\t\242\?\006\010|\020 (\003"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 236);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "distress_signal.proto", &protobuf_RegisterTypes);
  ::protobuf_dccl_2foption_5fextensions_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_distress_5fsignal_2eproto
namespace hat {
namespace protobuf {
const ::google::protobuf::EnumDescriptor* DistressSignal_SwimmerState_descriptor() {
  protobuf_distress_5fsignal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_distress_5fsignal_2eproto::file_level_enum_descriptors[0];
}
bool DistressSignal_SwimmerState_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DistressSignal_SwimmerState DistressSignal::SAFE;
const DistressSignal_SwimmerState DistressSignal::DISTRESSED;
const DistressSignal_SwimmerState DistressSignal::SwimmerState_MIN;
const DistressSignal_SwimmerState DistressSignal::SwimmerState_MAX;
const int DistressSignal::SwimmerState_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void DistressSignal::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DistressSignal::kStateFieldNumber;
const int DistressSignal::kTagIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DistressSignal::DistressSignal()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_distress_5fsignal_2eproto::scc_info_DistressSignal.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:hat.protobuf.DistressSignal)
}
DistressSignal::DistressSignal(const DistressSignal& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&tag_id_, &from.tag_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&tag_id_)) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:hat.protobuf.DistressSignal)
}

void DistressSignal::SharedCtor() {
  tag_id_ = 0u;
  state_ = 1;
}

DistressSignal::~DistressSignal() {
  // @@protoc_insertion_point(destructor:hat.protobuf.DistressSignal)
  SharedDtor();
}

void DistressSignal::SharedDtor() {
}

void DistressSignal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* DistressSignal::descriptor() {
  ::protobuf_distress_5fsignal_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_distress_5fsignal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DistressSignal& DistressSignal::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_distress_5fsignal_2eproto::scc_info_DistressSignal.base);
  return *internal_default_instance();
}


void DistressSignal::Clear() {
// @@protoc_insertion_point(message_clear_start:hat.protobuf.DistressSignal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    tag_id_ = 0u;
    state_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DistressSignal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hat.protobuf.DistressSignal)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .hat.protobuf.DistressSignal.SwimmerState state = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::hat::protobuf::DistressSignal_SwimmerState_IsValid(value)) {
            set_state(static_cast< ::hat::protobuf::DistressSignal_SwimmerState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 tag_id = 2 [(.dccl.field) = {
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_tag_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tag_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hat.protobuf.DistressSignal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hat.protobuf.DistressSignal)
  return false;
#undef DO_
}

void DistressSignal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hat.protobuf.DistressSignal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .hat.protobuf.DistressSignal.SwimmerState state = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->state(), output);
  }

  // required uint32 tag_id = 2 [(.dccl.field) = {
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->tag_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hat.protobuf.DistressSignal)
}

::google::protobuf::uint8* DistressSignal::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:hat.protobuf.DistressSignal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .hat.protobuf.DistressSignal.SwimmerState state = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->state(), target);
  }

  // required uint32 tag_id = 2 [(.dccl.field) = {
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->tag_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hat.protobuf.DistressSignal)
  return target;
}

size_t DistressSignal::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:hat.protobuf.DistressSignal)
  size_t total_size = 0;

  if (has_tag_id()) {
    // required uint32 tag_id = 2 [(.dccl.field) = {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->tag_id());
  }

  if (has_state()) {
    // required .hat.protobuf.DistressSignal.SwimmerState state = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
  }

  return total_size;
}
size_t DistressSignal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hat.protobuf.DistressSignal)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 tag_id = 2 [(.dccl.field) = {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->tag_id());

    // required .hat.protobuf.DistressSignal.SwimmerState state = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DistressSignal::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hat.protobuf.DistressSignal)
  GOOGLE_DCHECK_NE(&from, this);
  const DistressSignal* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DistressSignal>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hat.protobuf.DistressSignal)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hat.protobuf.DistressSignal)
    MergeFrom(*source);
  }
}

void DistressSignal::MergeFrom(const DistressSignal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hat.protobuf.DistressSignal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      tag_id_ = from.tag_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      state_ = from.state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DistressSignal::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hat.protobuf.DistressSignal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DistressSignal::CopyFrom(const DistressSignal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hat.protobuf.DistressSignal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DistressSignal::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void DistressSignal::Swap(DistressSignal* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DistressSignal::InternalSwap(DistressSignal* other) {
  using std::swap;
  swap(tag_id_, other->tag_id_);
  swap(state_, other->state_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DistressSignal::GetMetadata() const {
  protobuf_distress_5fsignal_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_distress_5fsignal_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protobuf
}  // namespace hat
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::hat::protobuf::DistressSignal* Arena::CreateMaybeMessage< ::hat::protobuf::DistressSignal >(Arena* arena) {
  return Arena::CreateInternal< ::hat::protobuf::DistressSignal >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
